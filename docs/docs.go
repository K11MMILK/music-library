// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/group/": {
            "get": {
                "description": "Get a list of all groups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "GetAllGroups",
                "operationId": "get-all-groups",
                "responses": {
                    "200": {
                        "description": "Returns a list of all groups",
                        "schema": {
                            "$ref": "#/definitions/handler.getAllGroupsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get all groups",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "CreateGroup",
                "operationId": "create-group",
                "parameters": [
                    {
                        "description": "Group information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/musiclibrary.Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns group ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create group",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/group/filter": {
            "get": {
                "description": "Get groups with optional filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "GetGroupsWithFilter",
                "operationId": "get-groups-with-filter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name filter",
                        "name": "groupname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of groups per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a filtered list of groups",
                        "schema": {
                            "$ref": "#/definitions/handler.getAllGroupsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get groups",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/group/{id}": {
            "put": {
                "description": "Update an existing group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "UpdateGroup",
                "operationId": "update-group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/musiclibrary.UpdateGroupInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status of the operation",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update group",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "DeleteGroup",
                "operationId": "delete-group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status of the operation",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid group ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete group",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/song/": {
            "get": {
                "description": "Get all songs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "GetAllSongs",
                "operationId": "getAllSongs",
                "responses": {
                    "200": {
                        "description": "Returns a list of all songs",
                        "schema": {
                            "$ref": "#/definitions/handler.getAllSongsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get all songs",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new song",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "CreateSong",
                "operationId": "create-song",
                "parameters": [
                    {
                        "description": "Song information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/musiclibrary.CreateSongInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns song ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create song",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/song/filter": {
            "get": {
                "description": "Get songs with filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "GetSongsWithFilter",
                "operationId": "getSongsWithFilter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group filter",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song filter",
                        "name": "song",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.getAllSongsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/song/{id}": {
            "put": {
                "description": "Update an existing song",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "UpdateSong",
                "operationId": "update-song",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Song information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/musiclibrary.UpdateSongInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status of the operation",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update song",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing song",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "DeleteSong",
                "operationId": "delete-song",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status of the operation",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid song ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete song",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/songDetails/{id}": {
            "get": {
                "description": "Get song details by song ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "songDetails"
                ],
                "summary": "GetSongDetailsById",
                "operationId": "get-songDetails-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Song ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Song details data",
                        "schema": {
                            "$ref": "#/definitions/handler.songDetailsByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid song ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Song not found",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get song details",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update song details by songDetails ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "songDetails"
                ],
                "summary": "UpdateSongDetails",
                "operationId": "update-songDetails",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SongDetails ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SongDetails info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/musiclibrary.UpdateSongDetailsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of the operation",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "404": {
                        "description": "SongDetails not found",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update song details",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/songText/{id}/filter": {
            "get": {
                "description": "Get song text with pagination by song ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "songDetails"
                ],
                "summary": "GetSongText",
                "operationId": "get-song-text",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SongDetails ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit of verses per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Song text with pagination",
                        "schema": {
                            "$ref": "#/definitions/handler.songTextResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid songDetails ID or pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get songDetails",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.errorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handler.getAllGroupsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/musiclibrary.Group"
                    }
                }
            }
        },
        "handler.getAllSongsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/musiclibrary.Song"
                    }
                }
            }
        },
        "handler.songDetailsByIdResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/musiclibrary.SongDetailsDL"
                    }
                }
            }
        },
        "handler.songTextResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.statusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "musiclibrary.CreateSongInput": {
            "type": "object",
            "required": [
                "groupId",
                "songName"
            ],
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "songName": {
                    "type": "string",
                    "example": "Enter Sandman"
                }
            }
        },
        "musiclibrary.Group": {
            "type": "object",
            "required": [
                "groupName"
            ],
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "musiclibrary.Song": {
            "type": "object",
            "required": [
                "songName"
            ],
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "songName": {
                    "type": "string"
                }
            }
        },
        "musiclibrary.SongDetailsDL": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "releaseDate": {
                    "type": "string"
                },
                "songId": {
                    "type": "integer"
                }
            }
        },
        "musiclibrary.UpdateGroupInput": {
            "type": "object",
            "properties": {
                "groupName": {
                    "type": "string",
                    "example": "Metallica"
                }
            }
        },
        "musiclibrary.UpdateSongDetailsInput": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "https://example.com/song"
                },
                "releaseDate": {
                    "type": "string",
                    "example": "2024-01-01"
                },
                "text": {
                    "type": "string",
                    "example": "Song lyrics here"
                }
            }
        },
        "musiclibrary.UpdateSongInput": {
            "type": "object",
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "songName": {
                    "type": "string",
                    "example": "Enter Sandman"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Music-Library",
	Description:      "API Server for Music-library Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
